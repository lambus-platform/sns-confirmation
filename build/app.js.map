{"version":3,"sources":["../server/app.js"],"names":["app","port","process","env","PORT","use","bodyparser","urlencoded","extended","json","post","req","res","body","on","chunk","toString","payload","JSON","parse","Type","url","SubscribeURL","err","response","statusCode","listen","console","log"],"mappings":"AAAA;;AAEA;;AACA;;AACA;;;;AAEA,IAAMA,GAAG,GAAG,uBAAZ;AACA,IAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AAEAJ,GAAG,CAACK,GAAJ,CAAQC,oBAAWC,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR;AACAR,GAAG,CAACK,GAAJ,CAAQC,oBAAWG,IAAX,EAAR;AAEAT,GAAG,CAACU,IAAJ,CAAS,GAAT,EAAc,UAACC,GAAD,EAAMC,GAAN,EAAc;AACxB,MAAIC,IAAI,GAAG,EAAX;AAEAF,EAAAA,GAAG,CAACG,EAAJ,CAAO,MAAP,EAAe,UAACC,KAAD,EAAW;AACtBF,IAAAA,IAAI,IAAIE,KAAK,CAACC,QAAN,EAAR;AACH,GAFD;AAIAL,EAAAA,GAAG,CAACG,EAAJ,CAAO,KAAP,EAAc,YAAM;AAChB,QAAIG,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWN,IAAX,CAAd;;AACA,QAAII,OAAO,CAACG,IAAR,KAAiB,0BAArB,EAAiD;AAC7C,UAAIC,GAAG,GAAGJ,OAAO,CAACK,YAAlB;AACA,4BAAQD,GAAR,EAAa,UAACE,GAAD,EAAMC,QAAN,EAAmB;AAC5B,YAAI,CAACD,GAAD,IAAQC,QAAQ,CAACC,UAAT,KAAwB,GAApC,EAAyC;AACrCb,UAAAA,GAAG,CAACH,IAAJ,CAAS;AAAE,uBAAW;AAAb,WAAT;AACH,SAFD,MAEO;AACHG,UAAAA,GAAG,CAACH,IAAJ,CAAS;AAAE,uBAAW;AAAb,WAAT;AACH;AACJ,OAND;AAOH;AACJ,GAZD;AAaH,CApBD;AAsBAT,GAAG,CAAC0B,MAAJ,CAAWzB,IAAX,EAAiB;AAAA,SAAM0B,OAAO,CAACC,GAAR,yCAA6C3B,IAA7C,OAAN;AAAA,CAAjB","sourcesContent":["'use strict'\n\nimport express from 'express';\nimport bodyparser from 'body-parser';\nimport request from 'request';\n\nconst app = express();\nconst port = process.env.PORT || 3000;\n\napp.use(bodyparser.urlencoded({ extended: false }));\napp.use(bodyparser.json());\n\napp.post('/', (req, res) => {\n    let body = '';\n\n    req.on('data', (chunk) => {\n        body += chunk.toString();\n    });\n\n    req.on('end', () => {\n        let payload = JSON.parse(body);\n        if (payload.Type === 'SubscriptionConfirmation') {\n            let url = payload.SubscribeURL;\n            request(url, (err, response) => {\n                if (!err && response.statusCode === 200) {\n                    res.json({ \"success\": true });\n                } else {\n                    res.json({ \"success\": false });\n                }\n            });\n        }\n    });\n});\n\napp.listen(port, () => console.log(`Example app listening on port ${port}!`));"],"file":"app.js"}